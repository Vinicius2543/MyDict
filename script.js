const dicionario_python = {
    'python': 'Tradução: Python;   Explicação: A linguagem de programação em si.;   Explanation: The programming language itself.',
    'variable': 'Tradução: Variável (var);   Explicação: Um nome que armazena um valor. Declarado com `var_name = value`.;   Explanation: A named storage for a value. Declared with `var_name = value`.',
    'function': 'Tradução: Função (func);   Explicação: Um bloco de código que executa uma tarefa específica. Definido com `def func_name(arguments):`.;   Explanation: A block of code that performs a specific task. Defined with `def func_name(arguments):`.',
    'list': 'Tradução: Lista (lista);   Explicação: Uma coleção ordenada de itens mutáveis. Criada com `list_name = [item1, item2]`.;   Explanation: An ordered collection of mutable items. Created with `list_name = [item1, item2]`.',
    'dictionary': 'Tradução: Dicionário (dict);   Explicação: Uma coleção de pares chave-valor. Criado com dict_name = {key1: value1, key2: value2}.;   Explanation: A collection of key-value pairs. Created with dict_name = {key1: value1, key2: value2}.',
    'loop': 'Tradução: Loop (loop);   Explicação: Um bloco de código repetido até que uma condição seja atendida. Exemplo: `for item in list:`.;   Explanation: A block of code that is repeated until a condition is met. Example: `for item in list:`.',
    'conditional': 'Tradução: Condicional (se/senão);   Explicação: Executa diferentes ações baseadas em condições. Exemplo: `if condition:`.;   Explanation: Executes different actions based on conditions. Example: `if condition:`.',
    'class': 'Tradução: Classe (classe);   Explicação: Um modelo para criar objetos. Define atributos e métodos. Exemplo: `class ClassName:`.; Explanation: A blueprint for creating objects. Defines attributes and methods. Example: `class ClassName:`.',
    'object': 'Tradução: Objeto (obj);   Explicação: Uma instância de uma classe com atributos e métodos. Criado com `obj_name = ClassName()`.;   Explanation: An instance of a class with attributes and methods. Created with `obj_name = ClassName()`.',
    'method': 'Tradução: Método (método);   Explicação: Uma função dentro de uma classe. Chamado em objetos. Exemplo: `obj_name.method_name()`.;   Explanation: A function inside a class. Called on objects. Example: `obj_name.method_name()`.',
    'import': 'Tradução: Importar (importar);   Explicação: Traga módulos ou bibliotecas externas. Feito com `import module_name`.;   Explanation: Bring in external modules or libraries. Done with `import module_name`.',
    'module': 'Tradução: Módulo (módulo);   Explicação: Um arquivo contendo definições. Acessado com `module_name.function()`.;   Explanation: A file containing definitions. Accessed with `module_name.function()`.',
    'string': 'Tradução: String (str);   Explicação: Sequência de caracteres. Declarada com `str_name = "text"`.;   Explanation: A sequence of characters.',
    'integer': 'Tradução: Inteiro (int);   Explicação: Número inteiro. Exemplo: `int_num = 5`.;   Explanation: An integer number. Example: `int_num = 5`.',
    'float': 'Tradução: Flutuante (float);   Explicação: Número decimal. Exemplo: `float_num = 3.14`.;   Explanation: A decimal number. Example: `float_num = 3.14`.',
    'boolean': 'Tradução: Booleano (bool);   Explicação: Valor verdadeiro (True) ou falso (False). Usado em condições.;   Explanation: A true (True) or false (False) value. Used in conditions.',
    'operators': 'Tradução: Operadores (ops);   Explicação: Símbolos que realizam operações matemáticas e lógicas, como +, -, *, /, >, <, ==.;   Explanation: Symbols that perform mathematical and logical operations, like +, -, *, /, >, <, ==.',
    'index': 'Tradução: Índice (índice);   Explicação: Número usado para acessar elementos em uma sequência.;   Explanation: A number used to access elements in a sequence.',
    'len': 'Tradução: Comprimento (len);   Explicação: Função que retorna o tamanho de uma sequência. Usada com `len(sequence)`.;   Explanation: A function that returns the length of a sequence. Used with `len(sequence)`.',
    'for': 'Tradução: Para (for);   Explicação: Loop que itera sobre sequências. Exemplo: `for item in list:`.;   Explanation: A loop that iterates over sequences. Example: `for item in list:`.',
    'while': 'Tradução: Enquanto (while);   Explicação: Loop que executa enquanto a condição é verdadeira. Exemplo: `while condition:`.;   Explanation: A loop that runs while the condition is true. Example: `while condition:`.',
    'break': 'Tradução: Quebrar (break);   Explicação: Interrompe um loop. Usado em `while` ou `for`.;   Explanation: Stops a loop. Used in `while` or `for`.',
    'continue': 'Tradução: Continuar (continue);   Explicação: Pula a iteração atual de um loop. Usado em `while` ou `for`.;   Explanation: Skips the current iteration of a loop. Used in `while` or `for`.',
    'range': 'Tradução: Intervalo (range);   Explicação: Função que cria uma sequência de números. Usada em loops.;   Explanation: A function that creates a sequence of numbers. Used in loops.',
    'return': 'Tradução: Retornar (return);   Explicação: Declara o valor de retorno de uma função.;   Explanation: Declares the return value of a function.',
    'input': 'Tradução: Entrada (input);   Explicação: Função para receber dados do usuário.;   Explanation: A function to receive data from the user.',
    'print': 'Tradução: Imprimir (print);   Explicação: Função para mostrar saída na tela.;   Explanation: A function to display output on the screen.',
    'try': 'Tradução: Tentar/Exceto (try/except);   Explicação: Lidar com erros em um bloco de código.;   Explanation: Handle errors in a code block.',
    'lambda': 'Tradução: Lambda;   Explicação: Função anônima de uma expressão. Exemplo: `lambda x: x + 1`.;   Explanation: An anonymous function of one expression. Example: `lambda x: x + 1`.',
    'map': 'Tradução: Mapear (map);   Explicação: Aplica uma função a todos os itens em uma sequência. Exemplo: `map(func, sequence)`.;   Explanation: Applies a function to all items in a sequence. Example: `map(func, sequence)`.',
    'filter': 'Tradução: Filtrar (filter);   Explicação: Retorna itens de uma sequência que atendem a uma condição. Exemplo: `filter(func, sequence)`.;   Explanation: Returns items from a sequence that meet a condition. Example: `filter(func, sequence)`.',
    'list comprehension': 'Tradução: Compreensão de Lista (comp. de lista);   Explicação: Criar listas de maneira concisa. Exemplo: `[x**2 for x in range(10)]`.;   Explanation: Create lists concisely. Example: `[x**2 for x in range(10)]`.',
    'tuple': 'Tradução: Tupla (tupla);   Explicação: Coleção imutável de elementos. Declarada com tuple_name = (item1, item2).;   Explanation: An immutable collection of elements. Declared with tuple_name = (item1, item2).',
    'set': 'Tradução: Conjunto (conjunto);   Explicação: Coleção não ordenada de elementos únicos. Criada com `set_name = {item1, item2}`.;   Explanation: An unordered collection of unique elements. Created with `set_name = {item1, item2}`.',
    'assignment operator': 'Tradução: Operador de Atribuição (=);   Explicação: Atribui um valor a uma variável. Exemplo: `var_name = value`.;   Explanation: Assigns a value to a variable. Example: `var_name = value`.',
    'comparison operator': 'Tradução: Operador de Comparação (==, >, <, etc.);   Explicação: Compara valores. Usado em condições.;   Explanation: Compares values. Used in conditions.',
    'logical operator': 'Tradução: Operador Lógico (e, ou, não);   Explicação: Realiza operações lógicas. Usado em condições.;   Explanation: Performs logical operations. used in conditions.',
    'scope': 'Tradução: Escopo (escopo);   Explicação: Contexto onde uma variável é válida.;   Explanation: The context where a variable is valid.',
    'argument': 'Tradução: Argumento (arg);   Explicação: Valor passado para uma função.;   Explanation: A value passed to a function.',
    'negative index': 'Tradução: Índice Negativo;   Explicação: Acessa elementos de sequências de trás para frente.;   Explanation: Accesses elements of sequences from the end.'
}

const dicionario_java = {
    'variable': 'Tradução: Variável (var);\n   Explicação: Um espaço nomeado para armazenar um valor.\n   Declarado com tipo_variável nome_variável = valor.;\n   Explanation: A named storage for a value.\n   Declared with var_type var_name = value.',
    'class': 'Tradução: Classe (classe);\n   Explicação: Um modelo para criar objetos.\n   Define atributos e métodos.\n   Exemplo: class NomeClasse { }.;\n   Explanation: A blueprint for creating objects.\n   Defines attributes and methods.\n   Example: class ClassName { }.',
    'method': 'Tradução: Método (método);\n   Explicação: Uma função dentro de uma classe.\n   Chamado em objetos.\n   Exemplo: tipoRetorno nomeMétodo(parâmetros) { }.;\n   Explanation: A function inside a class.\n   Called on objects.\n   Example: returnType methodName(parameters) { }.',
    'object': 'Tradução: Objeto (obj);\n   Explicação: Uma instância de uma classe com atributos e métodos.\n   Criado com NomeClasse nomeObjeto = new NomeClasse();.;\n   Explanation: An instance of a class with attributes and methods.\n   Created with ClassName objName = new ClassName();.',
    'constructor': 'Tradução: Construtor (construtor);\n   Explicação: Um método especial usado para inicialização de objetos quando o objeto é criado.;\n   Explanation: A special method used for object initialization when the object is created.',
    'inheritance': 'Tradução: Herança (herança);\n   Explicação: Um mecanismo no qual uma nova classe herda propriedades e comportamentos de uma classe existente.;\n   Explanation: A mechanism where a new class inherits properties and behaviors from an existing class.',
    'polymorphism': 'Tradução: Polimorfismo (polimorfismo);\n   Explicação: A habilidade de objetos assumirem várias formas, frequentemente alcançada por meio da sobrescrita de métodos.;\n   Explanation: The ability of objects to take on multiple forms, often achieved through method overriding.',
    'encapsulation': 'Tradução: Encapsulamento (encapsulamento);\n   Explicação: A prática de agrupar dados (atributos) e métodos que operam sobre esses dados em uma única unidade (classe).;\n   Explanation: The practice of bundling data (attributes) and methods that operate on the data into a single unit (class).',
    'abstraction': 'Tradução: Abstração (abstração);\n   Explicação: O processo de simplificar a realidade complexa modelando classes com base nas características essenciais que um objeto deve ter.;\n   Explanation: The process of simplifying complex reality by modeling classes based on the essential features an object should have.',
    'interface': 'Tradução: Interface (interface);\n   Explicação: Um contrato que especifica métodos que uma classe deve implementar.\n   Múltiplas interfaces podem ser implementadas por uma classe.;\n   Explanation: A contract specifying methods that a class must implement.\n   Multiple interfaces can be implemented by a class.',
    'array': 'Tradução: Arranjo (arranjo);\n   Explicação: Uma estrutura de dados que contém uma sequência de elementos do mesmo tipo de dados com tamanho fixo.;\n   Explanation: A data structure that holds a fixed-size sequence of elements of the same data type.',
    'loop': 'Tradução: Loop (loop);\n   Explicação: Um bloco de código que é repetido até que uma condição seja atendida.\n   Exemplo: for (tipo item : arranjo) { }.;\n   Explanation: A block of code that is repeated until a condition is met.\n   Example: for (type item : array) { }.',
    'conditional': 'Tradução: Condicional (condicional);\n   Explicação: Executa ações diferentes com base em condições.\n   Exemplo: if (condição) { } else if (outraCondição) { }.;\n   Explanation: Executes different actions based on conditions.\n   Example: if (condition) { } else if (anotherCondition) { }.',
    'method overloading': 'Tradução: Sobrecarga de Método (sobrecarga);\n   Explicação: Definir vários métodos na mesma classe com o mesmo nome, mas listas de parâmetros diferentes.;\n   Explanation: Defining multiple methods in the same class with the same name but different parameter lists.',
    'method overriding': 'Tradução: Sobrescrita de Método (sobrescrita);\n   Explicação: Substituir a implementação de um método em uma subclasse para fornecer uma implementação específica para essa subclasse.;\n   Explanation: Replacing a methods implementation in a subclass to provide a specific implementation for that subclass.',
    'package': 'Tradução: Pacote (pacote);\n   Explicação: Um espaço de nomes que organiza um conjunto de classes e interfaces relacionadas.;\n   Explanation: A namespace that organizes a set of related classes and interfaces.',
    'static': 'Tradução: Estático (estático);\n   Explicação: Uma palavra-chave que indica que um campo ou método pertence à própria classe, em vez de instâncias da classe.;\n   Explanation: A keyword indicating that a field or method belongs to the class itself, rather than to instances of the class.',
    'public': 'Tradução: Público (público);\n   Explicação: Um modificador de acesso que permite que uma classe, método ou campo seja acessado de qualquer lugar.;\n   Explanation: an access modifier that allows a class, method, or field to be accessed from anywhere.',
    'private': 'Tradução: Privado (privado);\n   Explicação: Um modificador de acesso que restringe o acesso à classe ou bloco que o envolve.;\n   Explanation: An access modifier that restricts access to the class or enclosing block.',
    'return': 'Tradução: Retorno (retorno);\n   Explicação: Uma palavra-chave usada para sair de um método e fornecer um valor de retorno, se o método tiver um tipo de retorno.;\n   Explanation: A keyword used to exit a method and provide a return value if the method has a return type.'
}


const dicionario_c = {
    'asm': 'Indica instruções em assembly.',
    'auto': 'Define a classe de armazenamento padrão, ou seja , a variável é criada quando a função é invocada e depois é destruída quando a função termina.',
    'break': 'Comando para forçar a saída imediata dos comandos switch, for, while, e , do…while.',
    'case': 'Utilizado dentro do comando switch para selecionar uma constante.',
    'char': 'Tipo de dados utilizado para armazenar caracteres.',
    'const': 'Impede que uma variável seja modificada, criando assim uma constante.',
    'continue': 'Força a interrupção dos loops for , while , ou do…while fazendo com que passem para a próxima iteração.',
    'default': 'É utilizado dentro de switch…case para tratar valores não definidos anteriormente nas opções case.',
    'do': 'Estutura de repetição usada em conjunto com o while . O comando do…while faz com que os comandos do bloco a ser repetido sejam executados no mínimo uma vez.',
    'double': 'Tipo de dados numérico de ponto flutuante com precisão dupla.',
    'else': 'Indica um bloco de comandos a ser executado quando a condição do comando if for falsa.',
    'enum': 'Tipo de dados definido pelo programador que permite a definição de constantes',
    'extern': 'Indica que uma variável foi declarada em outro arquivo.',
    'float': 'Tipo de dados de ponto flutuante com precisão simples.',
    'for': 'Estrutura de repetição que utiliza condições e contador.',
    'goto': 'Comando que permite “saltar” incondicionalmente para uma posição do programa pré-deteminada.',
    'if': 'Comando condicional que altera o fluxo do programa de acordo com uma condição que pode ser verdadeira ou falsa.',
    'int': 'É o tipo de dados mais usado para armazenar valores inteiros.',
    'long': 'É um tipo de dados usado para armazenar valores inteiros que possui precisão superior ao tipo int.',
    'printf': 'Exibe um ou mais dados na tela. Para tanto ele deve receber pelo menos dois parâmetros, separados por vírgula: um string de formato que define, através de caracteres especiais, os tipos dos dados a serem impressos e suas posições na linha de impressão; um dado a ser impresso.',
    'register': 'Solicita o armazenamento diretamente nos registradores do processador.',
    'return': 'Retorna um valor dentro de uma função ou força o abandono da mesma.',
    'scanf': 'Interrompe o programa e espera que o usuário digite dados de entradas.',
    'short': 'É o chamado inteiro curto. Armazena valores inteiros com precisão menor (apenas 2 bytes) do que o tipo int.',
    'signed': 'Sinaliza que uma variável pode armazenar tanto valores positivos como negativos.',
    'sizeof': 'Comando usado para retornar o tamanho em bytes de um determinado tipo de dados.',
    'static': 'Comando que avisa ao compilador para reter o valor de uma determinada variável.',
    'struct': 'Cria as chamadas estruturas ou seja registros.',
    'switch': 'Comando de seleção usando em conjunto com o comando case, permite escolher entre várias opções.',
    'typedef': 'É um comando modificador usado para criar novos nomes para tipos de dados.',
    'union': 'Permite que um conjunto de variáveis partilhem o mesmo espaço na memória.',
    'unsigned': 'Faz com que a variável apenas aceite valores positivos ou zero.',
    'void': 'Comando que indica que a função não retorna nada ou que não tem parâmetros de entrada.',
    'volatile': 'Indica que uma variável pode ser alterada.',
    'while': 'Estrutura de repetição que executa enquanto uma condição é verdadeira.'
}
